***** Promise.all
- Nếu ta muốn thực hiện nhiều promises song song và chờ cho đến khi tất cả sẵn sàng.
- Lúc này ta sẽ dùng : Promise.all : Syntax :

		let promise = Promise.all([...promises...]);
		
- Promise.all nhận array các promises (có thể là bất cứ iterable nào) và return về 1 new promise.
- new promise sẽ resolve khi tất cả list promises được settled. Và array các results trở thành result của new promise.


		Promise.all([
		  new Promise(resolve => setTimeout(() => resolve(1), 3000)), // 1
		  new Promise(resolve => setTimeout(() => resolve(2), 2000)), // 2
		  new Promise(resolve => setTimeout(() => resolve(3), 1000))  // 3
		]).then(alert); // 1,2,3 when promises are ready: each promise contributes an array member
		
- ở trên sẽ trả về array kết quả là [1,2,3];
- NOTE :  thứ tự results sẽ giống như thứ tự trong Promise.all dù cho có nhanh hơn hay chậm hơn.
- Một ví dụ khác :

	let urls = [
	  'https://api.github.com/users/iliakan',
	  'https://api.github.com/users/remy',
	  'https://api.github.com/users/jeresig'
	];

	// map every url to the promise of the fetch
	let requests = urls.map(url => fetch(url));

	// Promise.all waits until all jobs are resolved
	Promise.all(requests)
	  .then(responses => responses.forEach(
		response => alert(`${response.url}: ${response.status}`)
	  ));
	  
	 
	 
- Nếu bất cứ promises nào bị rejected, promise được return bởi Promise.all sẽ ngay lập tức rejects với error đó.
- Nếu có lỗi ở 1 promise thì các promise khác tuy vẫn hoạt động nhưng result của nó sẽ bị Promise.all bỏ qua.
- Nếu truyền vào Promise.all là 1 giá trị khác promise object , nó sẽ return về giá trị đó.


**** Promise.allSettled :
- Promise.allSettled sẽ đợi cho đến khi tất cả promises được settle bất kể result. Result array sẽ có :

	+ {status: 'fulfilled', value: result} cho thành công.
	+ {status: 'rejected', value : reason: error} cho lỗi.
	
- VD :

	let urls = [
	  'https://api.github.com/users/iliakan',
	  'https://api.github.com/users/remy',
	  'https://no-such-url'
	];

	Promise.allSettled(urls.map(url => fetch(url)))
	  .then(results => { // (*)
		results.forEach((result, num) => {
		  if (result.status == "fulfilled") {
			alert(`${urls[num]}: ${result.value.status}`);
		  }
		  if (result.status == "rejected") {
			alert(`${urls[num]}: ${result.reason}`);
		  }
		});
	  });
	  
	 + Nếu có 1 lỗi thì kết quả sẽ trả về ở (*) là:
	 
	[
	  {status: 'fulfilled', value: ...response...},
	  {status: 'fulfilled', value: ...response...},
	  {status: 'rejected', reason: ...error object...}
	]
	
*** Promise.race :
- Giống như Promise.all, nhưng nó sẽ chỉ chờ first sellted promise và nhận result của nó hoặc error.
- Syntax :

	let promise = Promise.race(iterable);
	
- VD :

	Promise.race([
	  new Promise((resolve, reject) => setTimeout(() => resolve(1), 1000)),
	  new Promise((resolve, reject) => setTimeout(() => reject(new Error("Whoops!")), 2000)),
	  new Promise((resolve, reject) => setTimeout(() => resolve(3), 3000))
	]).then(alert); // 1
	
- Sau khi 1 return về do nhanh nhất, tất cả các results/errors khác sẽ bị loại bỏ.


*** Promise.any :
- Tương tự như Promise.race nhưng sẽ chờ cho đến khi first fulfilled promise và get it result. 
- Nếu tất cả đều bị rejected thì return promise là rejected với AggegateError : 1 special object chứa tất cả promise errors bên trong errors property của nó.
- Syntax :
	
		let promise = Promise.any(iterable);
		
		Promise.any([
		  new Promise((resolve, reject) => setTimeout(() => reject(new Error("Ouch!")), 1000)),
		  new Promise((resolve, reject) => setTimeout(() => reject(new Error("Error!")), 2000))
		]).catch(error => {
		  console.log(error.constructor.name); // AggregateError
		  console.log(error.errors[0]); // Error: Ouch!
		  console.log(error.errors[1]); // Error: Error
		});
		
***** Promise.resolve/reject :

** Promise.resolve :
- Promise.resolve(value) : tạo ra 1 resolved promise với result value.
- Tương đương với : let promise = new Promise(resolve => resolve(value));

- Thường được sử dụng khi 1 function được mong muốn sẽ trả về 1 promise.

	let cache = new Map();

	function loadCached(url) {
	  if (cache.has(url)) {
		return Promise.resolve(cache.get(url)); // (*)
	  }

	  return fetch(url)
		.then(response => response.text())
		.then(text => {
		  cache.set(url,text);
		  return text;
		});
	}
	
** Promise.reject :
- 			Promise.reject(error) creates a rejected promise with error.

Same as:	let promise = new Promise((resolve, reject) => reject(error));
	